service: citas-challenge
frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  iamRoleStatements:
    - Sid: AllowDynamo
      Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:us-east-1:*:table/${self:service}-appointments
    - Sid: AllowSNS
      Effect: Allow
      Action:
        - sns:Publish
      Resource: !Ref AppointmentsTopic
  environment:
    TABLE_NAME: ${self:service}-appointments
    SNS_TOPIC_ARN: !Ref AppointmentsTopic

functions:
  createAppointment:
    handler: src/handlers/appointment.createAppointment
    environment:
      TABLE_NAME: ${self:service}-appointments
      SNS_TOPIC_ARN: !Ref AppointmentsTopic
    events:
      - httpApi:
          path: /appointments
          method: post

  listAppointments:
    handler: src/handlers/appointment.listAppointments
    environment:
      TABLE_NAME: ${self:service}-appointments
    events:
      - httpApi:
          path: /appointments/{insuredId}
          method: get

  processPeAppointment:
    handler: src/handlers/appointmentPe.handler
    environment:
      RDS_HOST: ${env:RDS_PE_HOST}
      RDS_DATABASE: ${env:RDS_PE_DATABASE}
      RDS_USER: ${env:RDS_PE_USER}
      RDS_PASSWORD: ${env:RDS_PE_PASSWORD}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsPeQueue
              - Arn
          batchSize: 10

  processClAppointment:
    handler: src/handlers/appointmentCl.handler
    environment:
      RDS_HOST: ${env:RDS_CL_HOST}
      RDS_DATABASE: ${env:RDS_CL_DATABASE}
      RDS_USER: ${env:RDS_CL_USER}
      RDS_PASSWORD: ${env:RDS_CL_PASSWORD}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SqsClQueue
              - Arn
          batchSize: 10

resources:
  Resources:
    AppointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-appointments
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: insuredId
            AttributeType: S
          - AttributeName: scheduleId
            AttributeType: N
        KeySchema:
          - AttributeName: insuredId
            KeyType: HASH
          - AttributeName: scheduleId
            KeyType: RANGE

    AppointmentsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-appointments-topic

    SqsPeQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_PE

    SqsClQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SQS_CL

    PeSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt SqsPeQueue.Arn
        TopicArn: !Ref AppointmentsTopic
        FilterPolicy:
          countryISO: ["PE"]

    ClSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt SqsClQueue.Arn
        TopicArn: !Ref AppointmentsTopic
        FilterPolicy:
          countryISO: ["CL"]

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
